<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls">

    <!--Style for drag and drop operation targets-->
    <Style TargetType="Button" x:Key="DropButtonStyle" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--Add a clear-button to all TextBoxes-->
    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="controls:TextBoxHelper.ClearTextButton" Value="True"/>
    </Style>

    <!--For the button wrap panels on top of the tab pages-->
    <Style TargetType="WrapPanel" x:Key="MenuButtonPanel">
        <Setter Property="Margin" Value="-2"/>
        <Setter Property="Orientation" Value="Horizontal"/>
        <Style.Resources>
            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>

    <!--for buttons with a metro like icon-->
    <Style TargetType="Button" x:Key="GlyphButton" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"></Setter>
    </Style>
    <Style TargetType="ToggleButton" x:Key="GlyphToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"></Setter>
    </Style>







    <Style x:Key="MetroFlatToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource FlatButtonForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource FlatButtonBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{DynamicResource FlatButtonFontSize}" />
        <Setter Property="Padding" Value="10 5 10 5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <controls:ContentControlEx x:Name="PART_ContentPresenter"
                                                   Padding="{TemplateBinding Padding}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{TemplateBinding Content}"
                                                   ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                   RecognizesAccessKey="True"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="DarkGray" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush2}" />
            </MultiTrigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
                <Setter Property="Background" Value="{DynamicResource FlatButtonPressedBackgroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource GrayBrush2}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource MetroFlatToggleButton}" TargetType="ToggleButton"></Style>


</ResourceDictionary>